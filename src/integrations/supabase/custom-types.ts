// This file is automatically generated by Lovable.
// IMPORTANT: Do not edit this file manually. Any changes will be overwritten.
import type { Database as CoreDatabase, Json } from './database.types';

// Define custom ENUM types based on SQL migration
export type AppRole = 'admin' | 'customer' | 'manager' | 'courier';
export type OrderStatusType = 'pending' | 'processing' | 'shipped' | 'delivered' | 'canceled';
export type DeliveryStatusType = 'pending' | 'assigned' | 'picked_up' | 'delivered' | 'failed';
export type ChatSessionStatusType = 'open' | 'pending' | 'active' | 'closed' | 'resolved';
export type MessageSenderType = 'customer' | 'admin';
export type InventoryTransactionType = 'restock' | 'sale' | 'return' | 'adjustment';
export type CourierStatusType = 'available' | 'busy' | 'offline';

// Define custom table types
export interface Profile {
  id: string; // UUID, foreign key to auth.users
  name: string | null;
  email: string | null;
  phone: string | null;
  role: AppRole | null;
  created_at: string | null;
}

export interface Category {
  id: string; // UUID
  name: string;
  image: string | null;
  created_at: string | null;
}

export interface Product {
  id: string; // UUID
  name: string;
  type: string | null;
  category_id: string | null; // UUID, foreign key to categories
  price: number;
  description: string | null;
  specifications: Json | null; // JSONB
  origin: string | null;
  seller: string | null;
  images: string[] | null; // TEXT[]
  rating: number | null;
  review_count: number | null;
  in_stock: boolean | null;
  featured: boolean | null;
  discount: number | null;
  created_at: string | null;
  updated_at: string | null;
}

export interface DbAddress {
  id: string; // UUID
  user_id: string; // UUID, foreign key to profiles
  name: string;
  street: string;
  city: string;
  state: string;
  zip: string;
  country: string;
  is_default: boolean | null;
  created_at: string | null;
}

export interface DbShippingMethod {
  id: string; // UUID
  name: string;
  carrier: string;
  cost: number;
  estimated_days: number | null;
  active: boolean | null;
  created_at: string | null;
}

export interface DbOrder {
  id: string; // UUID
  user_id: string; // UUID, foreign key to profiles
  date: string; // TIMESTAMPTZ
  status: OrderStatusType | null;
  total: number;
  shipping_address_id: string | null; // UUID, foreign key to addresses
  shipping_method_id: string | null; // UUID, foreign key to shipping_methods
  payment_method: string | null;
  payment_details: string | null; // Added payment_details
  tracking_number: string | null;
  courier_id: string | null; // UUID, foreign key to profiles (courier)
  delivery_status: DeliveryStatusType | null;
  created_at: string | null;
}

export interface DbOrderItem {
  id: string; // UUID
  order_id: string; // UUID, foreign key to orders
  product_id: string; // UUID, foreign key to products
  product_name: string;
  quantity: number;
  price: number;
  created_at: string | null;
}

export interface DbInventoryTransaction {
  id: string; // UUID
  product_id: string; // UUID, foreign key to products
  quantity: number;
  transaction_type: InventoryTransactionType;
  notes: string | null;
  created_by: string | null; // UUID, foreign key to profiles
  created_at: string | null;
}

export interface DbCourier {
  id: string; // UUID
  user_id: string; // UUID, foreign key to profiles, unique
  first_name: string;
  last_name: string;
  phone: string; // unique
  vehicle_type: string | null;
  license_plate: string | null;
  status: CourierStatusType | null;
  current_location: string | null;
  created_at: string | null;
}

export interface ChatSession {
  id: string; // UUID
  customer_id: string | null; // UUID, foreign key to profiles
  admin_id: string | null; // UUID, foreign key to profiles
  status: ChatSessionStatusType | null;
  created_at: string | null;
  updated_at: string | null;
  last_message_at: string | null; // TIMESTAMPTZ
  topic: string | null;
}

export interface ChatDbMessage {
  id: string; // UUID
  session_id: string; // UUID, foreign key to chat_sessions
  sender_id: string; // UUID, foreign key to profiles
  sender_type: MessageSenderType;
  content: string;
  created_at: string | null;
  read_by_customer: boolean | null;
  read_by_admin: boolean | null;
  order_info: Json | null; // JSONB
}

// Extend the CoreDatabase 'public' schema with custom tables and refined existing ones
type ExtendedPublicSchema = Omit<CoreDatabase['public'], 'Tables' | 'Enums'> & {
  Tables: CoreDatabase['public']['Tables'] & {
    profiles: {
      Row: Profile;
      Insert: Omit<Profile, 'id'> & { id?: string };
      Update: Partial<Profile>;
    };
    categories: {
      Row: Category;
      Insert: Omit<Category, 'id'> & { id?: string };
      Update: Partial<Category>;
    };
    products: {
      Row: Product;
      Insert: Omit<Product, 'id'> & { id?: string };
      Update: Partial<Product>;
    };
    addresses: { // Assuming addresses table is managed here fully or refined
      Row: DbAddress;
      Insert: Omit<DbAddress, 'id'> & { id?: string };
      Update: Partial<DbAddress>;
    };
    shipping_methods: { // Assuming shipping_methods table is managed here fully or refined
      Row: DbShippingMethod;
      Insert: Omit<DbShippingMethod, 'id'> & { id?: string };
      Update: Partial<DbShippingMethod>;
    };
    orders: { // Assuming orders table is managed here fully or refined
      Row: DbOrder;
      Insert: Omit<DbOrder, 'id'> & { id?: string; payment_details?: string | null }; // Added payment_details
      Update: Partial<DbOrder & { payment_details?: string | null }>; // Added payment_details
    };
    order_items: { // Assuming order_items table is managed here fully or refined
      Row: DbOrderItem;
      Insert: Omit<DbOrderItem, 'id'> & { id?: string };
      Update: Partial<DbOrderItem>;
    };
    inventory_transactions: {
      Row: DbInventoryTransaction;
      Insert: Omit<DbInventoryTransaction, 'id'> & { id?: string };
      Update: Partial<DbInventoryTransaction>;
    };
    couriers: {
      Row: DbCourier;
      Insert: Omit<DbCourier, 'id'> & { id?: string };
      Update: Partial<DbCourier>;
    };
    chat_sessions: {
      Row: ChatSession;
      Insert: Omit<ChatSession, 'id'> & { id?: string };
      Update: Partial<ChatSession>;
    };
    messages: {
      Row: ChatDbMessage;
      Insert: Omit<ChatDbMessage, 'id'> & { id?: string };
      Update: Partial<ChatDbMessage>;
    };
  };
  Enums: CoreDatabase['public']['Enums'] & {
    app_role: AppRole;
    order_status_type: OrderStatusType;
    delivery_status_type: DeliveryStatusType;
    chat_session_status_type: ChatSessionStatusType;
    message_sender_type: MessageSenderType;
    inventory_transaction_type: InventoryTransactionType;
    courier_status_type: CourierStatusType;
  };
};

// Define the CustomDatabase type using the extended schema
export interface CustomDatabase extends Omit<CoreDatabase, 'public'> {
  public: ExtendedPublicSchema;
}

// Re-export Json type for convenience
export type { Json };
